import{p as u,r as l,d as p}from"./index-DPQ5Vlnn.js";const S=async(a,o,r={})=>{try{if(!a||o<=0)return{success:!1,error:"Invalid product ID or purchase amount",code:"INVALID_INPUT"};const e=u.getProductById(a);if(!e)return{success:!1,error:`Product with ID ${a} not found`,code:"PRODUCT_NOT_FOUND"};const d=parseInt(e.quantity||e.stock||0),t=parseInt(o);if(console.log(`Processing purchase: Product ${e.name}, Current Stock: ${d}, Purchase Amount: ${t}`),d<t)return{success:!1,error:`Insufficient stock. Available: ${d}, Requested: ${t}`,code:"INSUFFICIENT_STOCK",data:{productName:e.name,availableStock:d,requestedAmount:t,shortfall:t-d}};const s=Math.max(0,d-t);console.log(`Stock calculation: ${d} - ${t} = ${s}`);const c={...e,quantity:s,stock:s,availableStock:s,lastPurchase:{amount:t,timestamp:new Date().toISOString(),vendorId:r.vendorId,orderId:r.orderId},updatedAt:new Date().toISOString()};if(!u.updateProduct(a,c))return{success:!1,error:"Failed to update product in database",code:"DATABASE_UPDATE_FAILED"};if(l.emitStockUpdate("purchase",{productId:a,productName:e.name,previousStock:d,newStock:s,quantityPurchased:t,product:c,vendorId:r.vendorId,orderId:r.orderId,timestamp:Date.now()}),r.vendorId&&r.deliveryAddress){const i={customer:r.vendorName||`Vendor ${r.vendorId}`,customerId:r.vendorId,supplier:e.supplierName||`Supplier ${e.supplierId}`,supplierId:e.supplierId,products:[{id:a,name:e.name,quantity:t,unit:e.unit||"kg",price:e.price,image:e.image}],totalAmount:e.price*t,paymentMethod:r.paymentMethod||"UPI",deliveryAddress:r.deliveryAddress,orderDate:new Date().toISOString()},n=p.addDelivery(i);console.log("Added delivery to supplier dashboard:",n),l.emitOrderUpdate("new_order",{vendorId:r.vendorId,order:n})}return m({productId:a,productName:e.name,previousStock:d,newStock:s,purchaseAmount:t,vendorId:r.vendorId,orderId:r.orderId,timestamp:new Date().toISOString()}),{success:!0,data:{productId:a,productName:e.name,previousStock:d,newStock:s,purchaseAmount:t,updatedProduct:c}}}catch(e){return console.error("Error updating product stock after purchase:",e),{success:!1,error:e.message||"Unknown error occurred",code:"UNEXPECTED_ERROR"}}},m=a=>{try{const o=JSON.parse(localStorage.getItem("vendorMitraPurchaseLogs")||"[]");o.push(a),o.length>1e3&&o.splice(0,o.length-1e3),localStorage.setItem("vendorMitraPurchaseLogs",JSON.stringify(o))}catch(o){console.warn("Failed to log purchase transaction:",o)}};export{S as default,S as updateProductStockAfterPurchase};
